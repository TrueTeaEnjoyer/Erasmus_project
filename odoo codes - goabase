import json
import xmlrpc.client
import ssl
from datetime import datetime, timedelta

url = "http://148.251.132.24:8069"
db = "student"
username = 'student'
password = "student"

common = xmlrpc.client.ServerProxy('{}/xmlrpc/2/common'.format(url), verbose=False, use_datetime=True,
                                   context=ssl._create_unverified_context())
common.version()
uid = common.authenticate(db, username, password, {})
models = xmlrpc.client.ServerProxy('{}/xmlrpc/2/object'.format(url), verbose=False, use_datetime=True,
                                   context=ssl._create_unverified_context())

# Load event data from JSON file
with open('events.json') as f:
    events = json.load(f)

# Create calendar events from loaded data
for event in events:
    # Parse the start and end dates
    start_date_str = event['Date']

    # Split the start date string
    start_date_parts = start_date_str.split(' ')

    # Remove comma from day part
    day_str = start_date_parts[1].rstrip(',')

    # Extract year part by removing comma if present
    year_str = start_date_parts[3].rstrip(',')

    # Add leading zero if the day part is a single digit
    day_str = day_str.zfill(2)

    # Extract other parts
    month_str = start_date_parts[2]
    time_str = start_date_parts[4]

    print(f"Date parts: day={day_str}, month={month_str}, year={year_str}, time={time_str}")

    # Reconstruct the start date string with the corrected year format
    start_datetime = datetime.strptime(f"{day_str} {month_str} {year_str[-2:]} {time_str}", "%d %b %y %H:%M")
    print(f"Parsed datetime: {start_datetime}")

    # Check if an event with the same title and start time already exists
    existing_event_ids = models.execute_kw(db, uid, password, 'calendar.event', 'search',
                                           [[('name', '=', event['Title']),
                                             ('start', '=', start_datetime.strftime('%Y-%m-%d %H:%M:%S'))]])

    if not existing_event_ids:
        # Calculate the end time (assuming 3 hours duration)
        end_datetime = start_datetime + timedelta(hours=3)

        # Create the event with start and end times
        event_data = {
            'name': event['Title'],
            'start': start_datetime.strftime('%Y-%m-%d %H:%M:%S'),
            'stop': end_datetime.strftime('%Y-%m-%d %H:%M:%S'),  # Use stop instead of end for XML-RPC
            'description': event['Link'],  # Using the link as the description
            'location': event['Link'],  # Using the link as the location as well
        }
        event_id = models.execute_kw(db, uid, password, 'calendar.event', 'create', [event_data])
    else:
        print(f"Event '{event['Title']}' at {start_datetime} already exists.")
