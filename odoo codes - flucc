import json
import xmlrpc.client
import ssl
from datetime import datetime

# Suppress SSL verification warnings
ssl._create_default_https_context = ssl._create_unverified_context

# XML-RPC server details
url = "http://148.251.132.24:8069"
db = "student"
username = 'student'
password = "student"

# Establish XML-RPC connections
common = xmlrpc.client.ServerProxy('{}/xmlrpc/2/common'.format(url), verbose=False, use_datetime=True)
uid = common.authenticate(db, username, password, {})
models = xmlrpc.client.ServerProxy('{}/xmlrpc/2/object'.format(url), verbose=False, use_datetime=True)

# Load event data from JSON file
with open('events.json', 'r', encoding='utf-8') as file:
    data = json.load(file)

# Map of numeric month representations to English month names
numeric_to_english_months = {
    '01': 'January',
    '02': 'February',
    '03': 'March',
    '04': 'April',
    '05': 'May',
    '06': 'June',
    '07': 'July',
    '08': 'August',
    '09': 'September',
    '10': 'October',
    '11': 'November',
    '12': 'December'
}

# Create calendar events from loaded data
for event in data:
    try:
        # Extract date information
        date_str = event['Date'].split(', ')[1]  # Remove everything before comma
        print("Date string:", date_str)  # Debug print statement
        date_parts = date_str.split('.')
        day = date_parts[0]
        month = numeric_to_english_months[date_parts[1]]
        year = '20' + date_parts[2]  # Assuming all years in the data are in the 21st century
        date = '{} {} {}'.format(month, day, year)
        print("Formatted date:", date)  # Debug print statement

        # Extract time information if available
        if 'Time' in event:
            time = event['Time']
            print("Time:", time)  # Debug print statement
            # Extract start and end times
            start_time, end_time = time.split('â€”')
            # Remove unnecessary characters from end_time
            end_time = end_time.split('\\')[0]
        else:
            start_time = end_time = '00:00'

        # Parse the date with year
        start_datetime = datetime.strptime(date, "%B %d %Y")

        # Combine date and time to create datetime objects
        start_datetime = datetime.combine(start_datetime.date(), datetime.strptime(start_time, "%H:%M").time())
        end_datetime = datetime.combine(start_datetime.date(), datetime.strptime(end_time, "%H:%M").time())

        # Create the event with start and end times
        event_data = {
            'name': event['Title'],
            'start': start_datetime.strftime('%Y-%m-%d %H:%M:%S'),
            'stop': end_datetime.strftime('%Y-%m-%d %H:%M:%S'),  # Use stop instead of end for XML-RPC
            'description': event['Link'],  # Using the link as the description
            'location': event['Link'],  # Using the link as the location as well
        }
        event_id = models.execute_kw(db, uid, password, 'calendar.event', 'create', [event_data])
        print("New event created with ID:", event_id)
    except Exception as e:
        print("An error occurred:", str(e))
